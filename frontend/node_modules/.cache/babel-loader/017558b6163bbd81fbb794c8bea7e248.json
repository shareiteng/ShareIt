{"ast":null,"code":"/*\nCopyright 2016 Stu Kabakoff\nhttps://github.com/stutrek/imageSelector\nMIT Licensed\n*/\nvar events = require('add-event-listener');\n\nvar isRetina = window.devicePixelRatio && window.devicePixelRatio > 1.5;\nvar responsiveCallbacks = [];\n\nfunction addResponsiveCallback(callback) {\n  if (responsiveCallbacks.length === 0) {\n    events.addEventListener(window, 'resize', function () {\n      for (var i = 0; i < responsiveCallbacks.length; i++) {\n        responsiveCallbacks[i]();\n      }\n    });\n  }\n\n  responsiveCallbacks.push(callback);\n}\n\nfunction getStyle(el, styleProp) {\n  var y;\n\n  if (el.currentStyle) {\n    y = el.currentStyle[styleProp];\n  } else if (window.getComputedStyle) {\n    y = document.defaultView.getComputedStyle(el, null).getPropertyValue(styleProp);\n  }\n\n  return y;\n}\n\nfunction getWidth(element) {\n  var width = element.clientWidth;\n\n  if (width === 0) {\n    var widthStr = getStyle(element, 'width');\n\n    if (widthStr === 'auto') {\n      width = getWidth(element.parentNode);\n    } else if (widthStr.charAt(widthStr.length - 1) === '%') {\n      var percent = parseInt(widthStr, 10);\n      var parentWidth = getWidth(element.parentNode);\n      width = parentWidth * (percent / 100);\n    } else {\n      width = parseInt(widthStr, 10);\n    }\n  }\n\n  return width;\n}\n\nfunction addAt2x(url) {\n  var indexOfDot = url.lastIndexOf('.');\n  return url.substr(0, indexOfDot) + '@2x' + url.substr(indexOfDot);\n}\n\nfunction rateImage(imageWidth, desiredWidth) {\n  var ratio = imageWidth / desiredWidth;\n\n  if (ratio < 1) {\n    ratio = ratio / 2;\n  }\n\n  return Math.abs(1 - ratio);\n}\n\nvar aspectRatioCache = {};\n\nfunction createFilterOnAspectRatio(aspectRatio) {\n  if (!aspectRatioCache[aspectRatio]) {\n    aspectRatioCache[aspectRatio] = function (cut) {\n      return cut.aspectRatio === aspectRatio;\n    };\n  }\n\n  return aspectRatioCache[aspectRatio];\n}\n\nvar heightWidthCache = {};\n\nfunction createFilterOnWidthAndHeight(width, height) {\n  var desiredAspectRatio = width / height;\n  var ratioString = desiredAspectRatio.toString();\n\n  if (!heightWidthCache[ratioString]) {\n    heightWidthCache[ratioString] = function (cut) {\n      // if the cut is exactly the right ratio\n      if (cut.width / cut.height === desiredAspectRatio) {\n        return true;\n      } // if adding one to the width is larger and subtracting one is smaller than the desired ratio\n\n\n      if ((cut.width + 1) / cut.height >= desiredAspectRatio && (cut.width - 1) / cut.height <= desiredAspectRatio) {\n        return true;\n      }\n\n      return false;\n    };\n  }\n\n  return heightWidthCache[ratioString];\n}\n\nexports.selectCutWithAspectRatio = function (cuts, desiredWidth, aspectRatio, worstAccepableScore) {\n  cuts = cuts.filter(createFilterOnAspectRatio(aspectRatio));\n  return exports.selectCut(cuts, desiredWidth, worstAccepableScore);\n};\n\nexports.selectCutWithWidthAndHeight = function (cuts, desiredWidth, desiredHeight, worstAccepableScore) {\n  cuts = cuts.filter(createFilterOnWidthAndHeight(desiredWidth, desiredHeight));\n  return exports.selectCut(cuts, desiredWidth, worstAccepableScore);\n};\n\nexports.selectCut = function (cuts, desiredWidth, worstAccepableScore) {\n  if (worstAccepableScore === undefined) {\n    worstAccepableScore = 0.75;\n  }\n\n  var cutToUse,\n      bestScore = Infinity;\n\n  for (var i in cuts) {\n    if (cuts.hasOwnProperty(i)) {\n      var cut = cuts[i];\n\n      if (desiredWidth === cut.width) {\n        return cut;\n      }\n\n      var score = rateImage(cut.width, desiredWidth);\n\n      if (score < worstAccepableScore) {\n        if (score < bestScore) {\n          cutToUse = cut;\n          bestScore = score;\n        }\n      }\n    }\n  }\n\n  return cutToUse;\n};\n\nexports.addSource = function (element, srcAttribute, cuts) {\n  srcAttribute = srcAttribute || 'src';\n  cuts = cuts || JSON.parse(element.getAttribute('data-cuts'));\n  var width = getWidth(element);\n  var height;\n  var aspectRatio = element.getAttribute('data-aspect-ratio');\n  var shouldUseHeight = false;\n\n  for (var i in cuts) {\n    if (cuts.hasOwnProperty(i) && cuts[i].height) {\n      shouldUseHeight = true;\n      break;\n    }\n  }\n\n  if (element.attributes.height && element.attributes.height.specified) {\n    height = element.height;\n  } else {\n    height = getStyle(element, 'height');\n  }\n\n  height = parseInt(height, 10);\n  srcAttribute = element.getAttribute('data-src-attribute') || srcAttribute; // make sure it's not a missing image icon\n\n  if (height < 30) {\n    height = false;\n  }\n\n  var cut;\n\n  if (aspectRatio) {\n    cut = exports.selectCutWithAspectRatio(cuts, width, aspectRatio);\n  } else if (shouldUseHeight && height) {\n    cut = exports.selectCutWithWidthAndHeight(cuts, width, height);\n  } else {\n    cut = exports.selectCut(cuts, width);\n  }\n\n  if (cut) {\n    var src = cut.src;\n\n    if (isRetina && cut.at2x && cut.width < width * 1.5) {\n      if (typeof cut.at2x === 'string') {\n        src = cut.at2x;\n      } else {\n        src = addAt2x(src);\n      }\n    }\n\n    element.setAttribute(srcAttribute, src);\n  } else {\n    element.className += ' no-cut-found';\n    element.setAttribute(srcAttribute, '');\n  }\n};\n\nexports.watchImage = function (img, cuts, srcAttribute) {\n  var currentWidth = img.offsetWidth;\n  exports.addSource(img, srcAttribute, cuts);\n\n  var callback = function () {\n    if (img.offsetWidth !== currentWidth) {\n      currentWidth = img.offsetWidth;\n      exports.addSource(img, srcAttribute, cuts);\n    }\n  };\n\n  addResponsiveCallback(callback);\n  return {\n    destroy: function () {\n      var index = responsiveCallbacks.indexOf(callback);\n      responsiveCallbacks.splice(index, 1);\n    },\n    recalculate: function () {\n      exports.addSource(img, srcAttribute, cuts);\n    }\n  };\n};\n\nexports.selectImages = function (container, srcAttribute) {\n  container = container || document.body;\n  var elements = container.querySelectorAll('img[data-cuts]');\n  var element;\n\n  for (var i = 0; i < elements.length; i++) {\n    element = elements[i];\n\n    try {\n      var cuts = JSON.parse(element.getAttribute('data-cuts'));\n      element.removeAttribute('data-cuts');\n\n      if (element.getAttribute('data-responsive') === 'true') {\n        exports.watchImage(element, cuts, srcAttribute);\n      } else {\n        exports.addSource(element, srcAttribute, cuts);\n      }\n    } catch (e) {\n      console && console.error && console.error(e);\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}