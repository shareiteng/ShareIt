{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Clock = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _reactMotion = require('react-motion');\n\nvar _radium = require('radium');\n\nvar _radium2 = _interopRequireDefault(_radium);\n\nvar _dom = require('../helpers/dom');\n\nvar _data = require('../helpers/data');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // radius of clock, in px\n\n\nvar CLOCK_RADIUS = 110;\nvar CLOCK_SIZE = CLOCK_RADIUS * 2; // clock hand length, in px\n\nvar CLOCK_HAND_LENGTH = 90; // number of actual numbers to display\n\nvar NUMBER_INCREMENTS = 12;\nvar NUMBER_INCREMENTS_VALUE = 360 / NUMBER_INCREMENTS; // size of circle surrounding number\n\nvar NUMBER_SIZE = 34; // positioning of numbers within circle\n\nvar NUMBER_INNER_POSITION = 22;\n\nfunction animationPosition(unit) {\n  return unit === 'hour' ? NUMBER_INNER_POSITION - 30 : NUMBER_INNER_POSITION + 26;\n}\n\nvar cos = Math.cos,\n    sin = Math.sin,\n    atan2 = Math.atan2;\nvar pi = Math.PI;\n\nfunction rad(deg) {\n  return deg / (180 / pi);\n}\n\nfunction deg(rad) {\n  return rad * (180 / pi);\n}\n\nvar Clock = exports.Clock = function (_React$Component) {\n  _inherits(Clock, _React$Component);\n\n  function Clock(props) {\n    _classCallCheck(this, Clock);\n\n    var _this = _possibleConstructorReturn(this, (Clock.__proto__ || Object.getPrototypeOf(Clock)).call(this, props));\n\n    _this.mousedown = _this.mousedown.bind(_this);\n    _this.touchstart = _this.touchstart.bind(_this);\n    return _this;\n  }\n\n  _createClass(Clock, [{\n    key: 'render',\n    value: function render() {\n      var props = this.props;\n      var config = props.config;\n      var styles = {\n        clock: {\n          display: 'inline-block',\n          borderRadius: '200px',\n          background: config.CLOCK_BACKGROUND,\n          width: CLOCK_SIZE + 'px',\n          height: CLOCK_SIZE + 'px',\n          position: 'relative',\n          cursor: 'pointer'\n        },\n        numberPositioning: {\n          display: 'inline-block',\n          position: 'absolute',\n          color: config.CLOCK_NUMBER_COLOR,\n          fontSize: '16px',\n          pointerEvents: 'none',\n          borderRadius: '99px',\n          width: NUMBER_SIZE,\n          height: NUMBER_SIZE,\n          textAlign: 'center',\n          lineHeight: NUMBER_SIZE + 'px',\n          zIndex: 5\n        },\n        clockHand: {\n          position: 'relative'\n        }\n      };\n\n      function renderNumbersAndClockhand() {\n        var _this2 = this;\n\n        var unit = props.unit;\n        var animationItems = [unit === 'hour' ? 'hour' : 'minute'];\n        var animationOptions = {\n          willEnter: function willEnter(transition) {\n            return {\n              opacity: 0,\n              handOpacity: 0,\n              translate: animationPosition(transition.data)\n            };\n          },\n          willLeave: function willLeave(transition) {\n            return {\n              opacity: (0, _reactMotion.spring)(0),\n              handOpacity: (0, _reactMotion.spring)(0),\n              translate: (0, _reactMotion.spring)(animationPosition(transition.data))\n            };\n          },\n          styles: animationItems.map(function (unit) {\n            return {\n              key: unit,\n              style: {\n                opacity: (0, _reactMotion.spring)(1),\n                handOpacity: (0, _reactMotion.spring)(1, {\n                  stiffness: 120,\n                  damping: 40\n                }),\n                translate: (0, _reactMotion.spring)(NUMBER_INNER_POSITION)\n              },\n              data: unit\n            };\n          })\n        };\n        var handRotation = props[unit] * (360 / _data.CLOCK_DATA[unit].increments);\n        return _react2.default.createElement(_reactMotion.TransitionMotion, animationOptions, function (interpolatedStyles) {\n          return _react2.default.createElement('div', {\n            className: 'react-timekeeper__clock-animations-wrapper'\n          }, interpolatedStyles.map(function (anim) {\n            var data = _data.CLOCK_DATA[anim.data];\n            var showIntermediateValueDisplay = void 0;\n\n            if (anim.data === 'minute' && props.minute % 5) {\n              showIntermediateValueDisplay = _react2.default.createElement('circle', {\n                cx: CLOCK_RADIUS,\n                cy: NUMBER_INNER_POSITION,\n                r: 4,\n                fill: config.CLOCK_HAND_INTERMEDIATE_CIRCLE_BACKGROUND\n              });\n            }\n\n            return _react2.default.createElement('div', {\n              style: {\n                position: 'absolute'\n              },\n              key: anim.data,\n              ref: function ref(el) {\n                return _this2.clock = el;\n              },\n              className: 'react-timekeeper__clock-animations'\n            }, data.numbers.map(function (numberString, i) {\n              var num = i + 1;\n              return _react2.default.createElement('span', {\n                key: numberString,\n                style: _extends({}, styles.numberPositioning, {\n                  opacity: anim.style.opacity,\n                  left: sin(rad(num * -NUMBER_INCREMENTS_VALUE - 180)) * (CLOCK_RADIUS - anim.style.translate) + CLOCK_RADIUS - NUMBER_SIZE / 2,\n                  top: cos(rad(num * -NUMBER_INCREMENTS_VALUE - 180)) * (CLOCK_RADIUS - anim.style.translate) + CLOCK_RADIUS - NUMBER_SIZE / 2\n                })\n              }, numberString);\n            }), _react2.default.createElement('svg', {\n              width: CLOCK_SIZE,\n              height: CLOCK_SIZE,\n              viewBox: '0 0 ' + CLOCK_SIZE + ' ' + CLOCK_SIZE,\n              xmlns: 'http://www.w3.org/2000/svg',\n              style: _extends({}, styles.clockHand, {\n                opacity: anim.style.handOpacity\n              }),\n              className: 'react-timekeeper__clock-svgs'\n            }, _react2.default.createElement('g', {\n              transform: 'rotate(' + handRotation + ' ' + CLOCK_RADIUS + ' ' + CLOCK_RADIUS + ')'\n            }, _react2.default.createElement('line', {\n              x1: CLOCK_RADIUS,\n              y1: CLOCK_RADIUS,\n              x2: CLOCK_RADIUS,\n              y2: CLOCK_RADIUS - CLOCK_HAND_LENGTH,\n              strokeWidth: '1',\n              stroke: config.CLOCK_HAND_ARM\n            }), _react2.default.createElement('circle', {\n              cx: CLOCK_RADIUS,\n              cy: CLOCK_RADIUS,\n              r: 1.5,\n              fill: config.CLOCK_HAND_ARM\n            }), _react2.default.createElement('circle', {\n              cx: CLOCK_RADIUS,\n              cy: NUMBER_INNER_POSITION,\n              r: NUMBER_SIZE / 2,\n              fill: config.CLOCK_HAND_CIRCLE_BACKGROUND\n            }), showIntermediateValueDisplay)));\n          }));\n        });\n      }\n\n      return _react2.default.createElement('div', {\n        style: styles.clock,\n        onMouseDown: this.mousedown,\n        onTouchStart: this.touchstart,\n        className: 'react-timekeeper__clock'\n      }, renderNumbersAndClockhand.call(this));\n    }\n  }, {\n    key: 'handlePoint',\n    value: function handlePoint(clientX, clientY, canChangeUnit, forceCoarse) {\n      var x = clientX - CLOCK_RADIUS;\n      var y = -clientY + CLOCK_RADIUS;\n      var a = atan2(y, x);\n      var d = 90 - deg(a);\n\n      if (d < 0) {\n        d = 360 + d;\n      } // ensure touch doesn't bleed outside of clock radius\n\n\n      var r = Math.sqrt(x * x + y * y);\n\n      if (r > CLOCK_RADIUS && this.dragCount < 2) {\n        return false;\n      }\n\n      var unit = this.props.unit;\n      var isCoarse = this.props.config.useCoarseMinutes || forceCoarse; // calculate value based on current clock increments\n\n      var selected = Math.round(d / 360 * _data.CLOCK_DATA[unit].increments);\n\n      if (isCoarse) {\n        // if coarse, round up/down\n        var multiplier = _data.CLOCK_DATA[unit].coarseMultiplier;\n        selected = Math.round(selected / multiplier) * multiplier;\n      }\n\n      if (unit === 'hour') {\n        this.props.changeHour(selected, canChangeUnit);\n      } else if (unit === 'minute') {\n        this.props.changeMinute(selected, canChangeUnit);\n      }\n\n      return true;\n    }\n  }, {\n    key: 'mousedown',\n    value: function mousedown() {\n      this.dragCount = 0;\n      this.mousedragHandler = this.mousedrag.bind(this);\n      this.stopDragHandler = this.stopDragHandler.bind(this); // add listeners\n\n      document.addEventListener('mousemove', this.mousedragHandler, false);\n      document.addEventListener('mouseup', this.stopDragHandler, false);\n      this.props.clockWrapperEl.addEventListener('mouseleave', this.stopDragHandler, false);\n    }\n  }, {\n    key: 'mousedrag',\n    value: function mousedrag(e) {\n      var _calcOffset = (0, _dom.calcOffset)(this.clock, e.clientX, e.clientY),\n          offsetX = _calcOffset.offsetX,\n          offsetY = _calcOffset.offsetY;\n\n      this.handlePoint(offsetX, offsetY, false, this.dragCount < 2);\n      this.dragCount++;\n      e.preventDefault();\n      return false;\n    }\n  }, {\n    key: 'touchstart',\n    value: function touchstart() {\n      this.dragCount = 0; // bind handlers\n\n      this.touchdragHandler = this.touchdrag.bind(this);\n      this.stopDragHandler = this.stopDragHandler.bind(this);\n      window.blockMenuHeaderScroll = false;\n      document.addEventListener('touchmove', this.touchdragHandler, false);\n      document.addEventListener('touchend', this.stopDragHandler, false);\n      document.addEventListener('touchcancel', this.stopDragHandler, false);\n    }\n  }, {\n    key: 'touchdrag',\n    value: function touchdrag(e) {\n      var touch = e.targetTouches[0];\n\n      var _calcOffset2 = (0, _dom.calcOffset)(this.clock, touch.clientX, touch.clientY),\n          offsetX = _calcOffset2.offsetX,\n          offsetY = _calcOffset2.offsetY;\n\n      this.handlePoint(offsetX, offsetY, false, this.dragCount < 2);\n      this.dragCount++;\n      e.preventDefault();\n      return false;\n    }\n  }, {\n    key: 'stopDragHandler',\n    value: function stopDragHandler() {\n      var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      document.removeEventListener('mousemove', this.mousedragHandler, false);\n      document.removeEventListener('mouseup', this.stopDragHandler, false);\n      this.props.clockWrapperEl.removeEventListener('mouseleave', this.stopDragHandler, false);\n      document.removeEventListener('touchmove', this.touchdragHandler, false);\n      document.removeEventListener('touchend', this.stopDragHandler, false);\n      document.removeEventListener('touchcancel', this.stopDragHandler, false);\n      window.blockMenuHeaderScroll = false; // if user just clicks/taps a number (drag count < 2), then just assume it's a rough tap\n      // and force a rounded/coarse number (ie: 1, 2, 3, 4 is tapped, assume 0 or 5)\n\n      var forceCoarse = this.dragCount < 2;\n      var evType = e.type;\n\n      if (evType === 'mouseup') {\n        var _calcOffset3 = (0, _dom.calcOffset)(this.clock, e.clientX, e.clientY),\n            offsetX = _calcOffset3.offsetX,\n            offsetY = _calcOffset3.offsetY;\n\n        this.handlePoint(offsetX, offsetY, true, forceCoarse);\n      } else if (evType === 'touchcancel' || evType === 'touchend') {\n        var touch = e.targetTouches[0] || e.changedTouches[0];\n\n        if (touch && this.clock) {\n          var _calcOffset4 = (0, _dom.calcOffset)(this.clock, touch.clientX, touch.clientY),\n              _offsetX = _calcOffset4.offsetX,\n              _offsetY = _calcOffset4.offsetY;\n\n          this.handlePoint(_offsetX, _offsetY, true, forceCoarse);\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      // clear any event listeners\n      this.stopDragHandler();\n    }\n  }]);\n\n  return Clock;\n}(_react2.default.Component);\n\nClock.propTypes = {\n  config: _propTypes2.default.object.isRequired,\n  hour: _propTypes2.default.number.isRequired,\n  minute: _propTypes2.default.number.isRequired,\n  unit: _propTypes2.default.string.isRequired,\n  changeHour: _propTypes2.default.func.isRequired,\n  changeMinute: _propTypes2.default.func.isRequired,\n  clockWrapperEl: _propTypes2.default.object\n};\nexports.default = (0, _radium2.default)(Clock);","map":null,"metadata":{},"sourceType":"script"}